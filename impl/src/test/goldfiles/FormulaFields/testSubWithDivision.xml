<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testSubWithDivision">
   <testInstance formula="customnumber1__c/(customnumber2__c - 1)" returntype="Double" precision="12" scale="2">
    <SqlOutput nullAsNull="true">
       <Sql>(COALESCE($!s0s!$.customnumber1__c, 0)/(COALESCE($!s0s!$.customnumber2__c, 0)-1))</Sql>
       <Guard>(COALESCE($!s0s!$.customnumber2__c, 0)-1)=0</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="false">
       <Sql>($!s0s!$.customnumber1__c/($!s0s!$.customnumber2__c-1))</Sql>
       <Guard>($!s0s!$.customnumber2__c-1)=0</Guard>
    </SqlOutput>
    <JsOutput highPrec="true" nullAsNull="false">$F.nvl(context.record.customnumber1__c,new $F.Decimal('0')).div(($F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).sub(new $F.Decimal('1'))))</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?(context.record.customnumber1__c.div((context.record.customnumber2__c.sub(new $F.Decimal('1'))))):null</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">($F.nvl(context.record.customnumber1__c,0)/($F.nvl(context.record.customnumber2__c,0)-1))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?((context.record.customnumber1__c/(context.record.customnumber2__c-1))):null</JsOutput>
      <result>
      <inputvalues>[9,  9]</inputvalues>
         <formula>1.125</formula>
         <sql>1.125</sql>
         <javascript>1.125</javascript>
         <javascriptLp>1.125</javascriptLp>
         <formulaNullAsNull>1.125</formulaNullAsNull>
         <sqlNullAsNull>1.125</sqlNullAsNull>
         <javascriptNullAsNull>1.125</javascriptNullAsNull>
         <javascriptLpNullAsNull>1.125</javascriptLpNullAsNull>
      </result>
      <result>
      <inputvalues>[9,  10]</inputvalues>
         <formula>1</formula>
         <sql>1</sql>
         <javascript>1</javascript>
         <javascriptLp>1</javascriptLp>
         <formulaNullAsNull>1</formulaNullAsNull>
         <sqlNullAsNull>1</sqlNullAsNull>
         <javascriptNullAsNull>1</javascriptNullAsNull>
         <javascriptLpNullAsNull>1</javascriptLpNullAsNull>
      </result>
      <result>
      <inputvalues>[12,  11]</inputvalues>
         <formula>1.2</formula>
         <sql>1.2</sql>
         <javascript>1.2</javascript>
         <javascriptLp>1.2</javascriptLp>
         <formulaNullAsNull>1.2</formulaNullAsNull>
         <sqlNullAsNull>1.2</sqlNullAsNull>
         <javascriptNullAsNull>1.2</javascriptNullAsNull>
         <javascriptLpNullAsNull>1.2</javascriptLpNullAsNull>
      </result>
   </testInstance>
   <testInstance formula="customnumber2__c/(customnumber1__c - 1)" returntype="Double" precision="12" scale="2">
    <SqlOutput nullAsNull="true">
       <Sql>(COALESCE($!s0s!$.customnumber2__c, 0)/(COALESCE($!s0s!$.customnumber1__c, 0)-1))</Sql>
       <Guard>(COALESCE($!s0s!$.customnumber1__c, 0)-1)=0</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="false">
       <Sql>($!s0s!$.customnumber2__c/($!s0s!$.customnumber1__c-1))</Sql>
       <Guard>($!s0s!$.customnumber1__c-1)=0</Guard>
    </SqlOutput>
    <JsOutput highPrec="true" nullAsNull="false">$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).div(($F.nvl(context.record.customnumber1__c,new $F.Decimal('0')).sub(new $F.Decimal('1'))))</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null)?(context.record.customnumber2__c.div((context.record.customnumber1__c.sub(new $F.Decimal('1'))))):null</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">($F.nvl(context.record.customnumber2__c,0)/($F.nvl(context.record.customnumber1__c,0)-1))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null)?((context.record.customnumber2__c/(context.record.customnumber1__c-1))):null</JsOutput>
      <result>
      <inputvalues>[ 9, 9]</inputvalues>
         <formula>1.125</formula>
         <sql>1.125</sql>
         <javascript>1.125</javascript>
         <javascriptLp>1.125</javascriptLp>
         <formulaNullAsNull>1.125</formulaNullAsNull>
         <sqlNullAsNull>1.125</sqlNullAsNull>
         <javascriptNullAsNull>1.125</javascriptNullAsNull>
         <javascriptLpNullAsNull>1.125</javascriptLpNullAsNull>
      </result>
      <result>
      <inputvalues>[ 10, 9]</inputvalues>
         <formula>1.25</formula>
         <sql>1.25</sql>
         <javascript>1.25</javascript>
         <javascriptLp>1.25</javascriptLp>
         <formulaNullAsNull>1.25</formulaNullAsNull>
         <sqlNullAsNull>1.25</sqlNullAsNull>
         <javascriptNullAsNull>1.25</javascriptNullAsNull>
         <javascriptLpNullAsNull>1.25</javascriptLpNullAsNull>
      </result>
      <result>
      <inputvalues>[ 11, 12]</inputvalues>
         <formula>1</formula>
         <sql>1</sql>
         <javascript>1</javascript>
         <javascriptLp>1</javascriptLp>
         <formulaNullAsNull>1</formulaNullAsNull>
         <sqlNullAsNull>1</sqlNullAsNull>
         <javascriptNullAsNull>1</javascriptNullAsNull>
         <javascriptLpNullAsNull>1</javascriptLpNullAsNull>
      </result>
   </testInstance>
</testCase>
