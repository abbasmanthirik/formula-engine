<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testRoundUsesExp">
    <JsOutput highPrec="true" nullAsNull="false">($F.Decimal.exp($F.nvl(context.record.customnumber1__c,new $F.Decimal('0')))).mul('1e'+($F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).isPos()?$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).ceil():$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).floor()).toFixed(0)).round().div('1e'+($F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).isPos()?$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).ceil():$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toDP(18).floor()).toFixed(0))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">((($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0)))&gt;0)?Number(Number(Math.exp($F.nvl(context.record.customnumber1__c,0))).toFixed((($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0)))&lt;=20?(($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0))):20)):Math.round((Math.exp($F.nvl(context.record.customnumber1__c,0)))*('1e'+(($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0)))))/('1e'+(($F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.ceil($F.nvl(context.record.customnumber2__c,0)):Math.floor($F.nvl(context.record.customnumber2__c,0))))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?((((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c))&gt;0)?Number(Number(Math.exp(context.record.customnumber1__c)).toFixed(((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c))&lt;=20?((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c)):20)):Math.round((Math.exp(context.record.customnumber1__c))*('1e'+((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c))))/('1e'+((context.record.customnumber2__c)&gt;=0?Math.ceil(context.record.customnumber2__c):Math.floor(context.record.customnumber2__c)))):null</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber1__c!=null)?(($F.Decimal.exp(context.record.customnumber1__c)).mul('1e'+(context.record.customnumber2__c.isPos()?context.record.customnumber2__c.toDP(18).ceil():context.record.customnumber2__c.toDP(18).floor()).toFixed(0)).round().div('1e'+(context.record.customnumber2__c.isPos()?context.record.customnumber2__c.toDP(18).ceil():context.record.customnumber2__c.toDP(18).floor()).toFixed(0))):null</JsOutput>
    <SqlOutput nullAsNull="false">
       <Sql>ROUND(EXP(COALESCE($!s0s!$.customnumber1__c, 0)::numeric(40,20)), CASE WHEN COALESCE($!s0s!$.customnumber2__c, 0)&gt;=0 THEN CEIL(ROUND(COALESCE($!s0s!$.customnumber2__c, 0),33)) ELSE FLOOR(ROUND(COALESCE($!s0s!$.customnumber2__c, 0),33)) END::integer)</Sql>
       <Guard>null</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="true">
       <Sql>ROUND(EXP($!s0s!$.customnumber1__c::numeric(40,20)), CASE WHEN $!s0s!$.customnumber2__c&gt;=0 THEN CEIL(ROUND($!s0s!$.customnumber2__c,33)) ELSE FLOOR(ROUND($!s0s!$.customnumber2__c,33)) END::integer)</Sql>
       <Guard>null</Guard>
    </SqlOutput>
</testCase>
