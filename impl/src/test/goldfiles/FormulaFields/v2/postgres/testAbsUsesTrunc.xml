<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testAbsUsesTrunc">
    <JsOutput highPrec="true" nullAsNull="false">($F.nvl(context.record.customnumber1__c,new $F.Decimal('0'))).mul('1e'+$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toFixed(0)).trunc().div('1e'+$F.nvl(context.record.customnumber2__c,new $F.Decimal('0')).toFixed(0)).abs()</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">Math.abs(Math.trunc(($F.nvl(context.record.customnumber1__c,0))*('1e'+$F.nvl(context.record.customnumber2__c,0)))/('1e'+$F.nvl(context.record.customnumber2__c,0)))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null)?(Math.abs(Math.trunc((context.record.customnumber1__c)*('1e'+context.record.customnumber2__c))/('1e'+context.record.customnumber2__c))):null</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null)?((context.record.customnumber1__c).mul('1e'+context.record.customnumber2__c.toFixed(0)).trunc().div('1e'+context.record.customnumber2__c.toFixed(0)).abs()):null</JsOutput>
    <SqlOutput nullAsNull="false">
       <Sql>ABS(TRUNC(COALESCE($!s0s!$.customnumber1__c, 0), COALESCE($!s0s!$.customnumber2__c, 0)::integer))</Sql>
       <Guard>null</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="true">
       <Sql>ABS(TRUNC($!s0s!$.customnumber1__c, $!s0s!$.customnumber2__c::integer))</Sql>
       <Guard>null</Guard>
    </SqlOutput>
</testCase>
