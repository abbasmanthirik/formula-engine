<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testFloorRound">
    <JsOutput highPrec="true" nullAsNull="false">($F.nvl(context.record.customnumber1__c,new $F.Decimal('0')).div($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).mul($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).isPos()?$F.nvl(context.record.customnumber1__c,new $F.Decimal('0')).div($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).mul($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).toDP(18).floor():$F.nvl(context.record.customnumber1__c,new $F.Decimal('0')).div($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).mul($F.nvl(context.record.customnumber2__c,new $F.Decimal('0'))).toDP(18).ceil())</JsOutput>
    <JsOutput highPrec="false" nullAsNull="false">((($F.nvl(context.record.customnumber1__c,0)/$F.nvl(context.record.customnumber2__c,0))*$F.nvl(context.record.customnumber2__c,0))&gt;=0?Math.floor(($F.nvl(context.record.customnumber1__c,0)/$F.nvl(context.record.customnumber2__c,0))*$F.nvl(context.record.customnumber2__c,0)):Math.ceil(($F.nvl(context.record.customnumber1__c,0)/$F.nvl(context.record.customnumber2__c,0))*$F.nvl(context.record.customnumber2__c,0)))</JsOutput>
    <JsOutput highPrec="false" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber2__c!=null)?((((context.record.customnumber1__c/context.record.customnumber2__c)*context.record.customnumber2__c)&gt;=0?Math.floor((context.record.customnumber1__c/context.record.customnumber2__c)*context.record.customnumber2__c):Math.ceil((context.record.customnumber1__c/context.record.customnumber2__c)*context.record.customnumber2__c))):null</JsOutput>
    <JsOutput highPrec="true" nullAsNull="true">(context.record.customnumber1__c!=null&amp;&amp;context.record.customnumber2__c!=null&amp;&amp;context.record.customnumber2__c!=null)?((context.record.customnumber1__c.div(context.record.customnumber2__c).mul(context.record.customnumber2__c).isPos()?context.record.customnumber1__c.div(context.record.customnumber2__c).mul(context.record.customnumber2__c).toDP(18).floor():context.record.customnumber1__c.div(context.record.customnumber2__c).mul(context.record.customnumber2__c).toDP(18).ceil())):null</JsOutput>
    <SqlOutput nullAsNull="false">
       <Sql>CASE WHEN ((COALESCE($!s0s!$.customnumber1__c, 0)/COALESCE($!s0s!$.customnumber2__c, 0)) * COALESCE($!s0s!$.customnumber2__c, 0))&gt;=0 THEN FLOOR(ROUND(((COALESCE($!s0s!$.customnumber1__c, 0)/COALESCE($!s0s!$.customnumber2__c, 0)) * COALESCE($!s0s!$.customnumber2__c, 0)),33)) ELSE CEIL(ROUND(((COALESCE($!s0s!$.customnumber1__c, 0)/COALESCE($!s0s!$.customnumber2__c, 0)) * COALESCE($!s0s!$.customnumber2__c, 0)),33)) END</Sql>
       <Guard>COALESCE($!s0s!$.customnumber2__c, 0)=0</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="true">
       <Sql>CASE WHEN (($!s0s!$.customnumber1__c/$!s0s!$.customnumber2__c) * $!s0s!$.customnumber2__c)&gt;=0 THEN FLOOR(ROUND((($!s0s!$.customnumber1__c/$!s0s!$.customnumber2__c) * $!s0s!$.customnumber2__c),33)) ELSE CEIL(ROUND((($!s0s!$.customnumber1__c/$!s0s!$.customnumber2__c) * $!s0s!$.customnumber2__c),33)) END</Sql>
       <Guard>$!s0s!$.customnumber2__c=0</Guard>
    </SqlOutput>
</testCase>
