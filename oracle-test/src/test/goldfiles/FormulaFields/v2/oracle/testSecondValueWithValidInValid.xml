<?xml version="1.0" encoding="UTF-8"?>
<testCase name="testSecondValueWithValidInValid">
    <SqlOutput nullAsNull="false">
       <Sql>TRUNC((TO_NUMBER(TO_CHAR(TO_DATE($!s0s!$.dateString__c, 'YYYY-MM-DD HH24:MI:SS'), 'SSSSS')) * 1000-TRUNC(TO_NUMBER(TO_CHAR(TO_DATE($!s0s!$.dateString__c, 'YYYY-MM-DD HH24:MI:SS'), 'SSSSS')) * 1000/60000) * 60000)/1000)</Sql>
       <Guard> NOT REGEXP_LIKE ($!s0s!$.dateString__c, '^\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):[0-5]?\d:[0-5]?\d$')/* Adding some comments to keep the same length for this guard as it was before improving to more robust guard*/</Guard>
    </SqlOutput>
    <SqlOutput nullAsNull="true">
       <Sql>TRUNC((TO_NUMBER(TO_CHAR(TO_DATE($!s0s!$.dateString__c, 'YYYY-MM-DD HH24:MI:SS'), 'SSSSS')) * 1000-TRUNC(TO_NUMBER(TO_CHAR(TO_DATE($!s0s!$.dateString__c, 'YYYY-MM-DD HH24:MI:SS'), 'SSSSS')) * 1000/60000) * 60000)/1000)</Sql>
       <Guard> NOT REGEXP_LIKE ($!s0s!$.dateString__c, '^\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):[0-5]?\d:[0-5]?\d$')/* Adding some comments to keep the same length for this guard as it was before improving to more robust guard*/</Guard>
    </SqlOutput>
</testCase>
